---
title: "Proyecyo"
format: html
editor: visual
---

### **Proyección de ocupación**

```{r, error = FALSE, warning = FALSE, message = FALSE}
#| echo: false
library(stringr)
library(readxl)
library(dplyr)
library(ggplot2)
library(scales)
library(forecast)
```

## Información del hotel

En primer lugar, se obtendrá la información desde un archivo pdf, sobre la ocupación historica del hotel y se verifica que contenga los campos por utilizar.

```{r}
data <- read_excel("history.xlsx")

head(data)
```

Ahora se transforma la informacion en un dataframe y se filtran las columnas a utilizar, a través de la función select de la bilbioteca dplyr, con la siguiente descripción:

-   CONSIDERED_DATE = Fecha.

-   NO_ROOMS = Cantidad de habitaciones ocupadas.

-   CF_OCCUPANCY = % de ocupación sobre las habitaciones disponibles.

-   REAL_OCCUPANCY = % de ocupación sobre el total de habitaciones del hotel.

-   REVENUE = Total ingresos en pesos del día CF_AVERAGE_ROOM_RATE = Valor promedio de la habitación del día.

```{r}
ocupacion <- data.frame(data)

ocupacion %>% select("CONSIDERED_DATE",
                           "NO_PERSONS",
                           "CF_OCCUPANCY",
                           "REAL_OCCUPANCY", 
                           "REVENUE",
                           "CF_AVERAGE_ROOM_RATE")
head(ocupacion)
```

Ahora se agrupa el criterio, ya que no resulto transformar la columna CHAR_CONSIDERED_DATE en formato fecha, se agrupará por el formato de la columna CONSIDERE_DATE, elimando los primeros 3 caracteres, obteniendo un string de formado MMM-AA, puediendo agrupar los items por mes y año.

```{r}
ocupacion <- ocupacion %>%
  mutate(CONSIDERED_DATE = str_replace_all(
    CONSIDERED_DATE,
    c("JAN" = "01", "FEB" = "02", "MAR" = "03", 
      "APR" = "04", "MAY" = "05", "JUN" = "06", 
      "JUL" = "07", "AUG" = "08", "SEP" = "09", 
      "OCT" = "10", "NOV" = "11", "DEC" = "12")
  ))
ocupacion <- ocupacion %>%
  mutate(CONSIDERED_DATE = as.Date(paste0("20", str_sub(CONSIDERED_DATE, 1, 2), "-", str_sub(CONSIDERED_DATE, 4, 5), "-01"))) # Formato: YYYY-MM-DD

# Ordenar el DataFrame por la columna 'Fecha'
ocupacion <- ocupacion %>%
  arrange(CONSIDERED_DATE)
```

En esta parte se filtra el codigo para que contenga el mismo rango de fechas que la muestra sobre la ocupación en la industria.

```{r}
ocupacion_filtrada <- ocupacion %>%
  filter(CONSIDERED_DATE >= as.Date("2017-01-01") & CONSIDERED_DATE <= as.Date("2018-10-01"))
```

Se agrupan las filas por el concepto de fecha, creando un nuevo data frame, con la suma de las ventas y los promedios de las otras columnas.

```{r}
hotel <- ocupacion_filtrada %>%
  group_by(CONSIDERED_DATE) %>%
  summarize(
    ventas = sum(REVENUE, na.rm = TRUE), 
    pasajero_en_casa = sum(NO_PERSONS, na.rm = TRUE),
    prom_hab = mean(CF_AVERAGE_ROOM_RATE, na.rm = TRUE),
    ocupacion = mean(CF_OCCUPANCY, na.rm = TRUE),
    ocupacion_real = mean(REAL_OCCUPANCY, na.rm = TRUE),
    .groups = 'drop'  # Evita el agrupamiento adicional en el resultado
  )
hotel <- hotel %>%
  rename(Fecha = CONSIDERED_DATE)
head(hotel)
```

## Información del mercado hotelero

Al igual que en el caso del hotel se trabajara sobre una base de datos de la industria hotelera, obtenida directamente del [INE](https://view.officeapps.live.com/op/view.aspx?src=https%3A%2F%2Fwww.ine.gob.cl%2Fdocs%2Fdefault-source%2Factividad-del-turismo%2Fbbdd%2Fdocumentos%2Fenero-2017-a-octubre-2018.xlsx%3Fsfvrsn%3D1965c721_4&wdOrigin=BROWSELINK).

```{r}
data2 <- read_excel("ine.xlsx")

head(data2)
```

```{r}
industria <- data.frame(data2)

industria <- data2 %>%
  select(Fecha, `Total Llegadas`, `Total Pernoctación`)

ine <- industria %>% 
  group_by(Fecha) %>%
  summarize(
    total_llegadas = sum(`Total Llegadas`, na.rm = TRUE), 
    total_ocupacion_ind = sum(`Total Pernoctación`, na.rm = TRUE),
    .groups = 'drop'  # Evita el agrupamiento adicional en el resultado
  )
head(ine)
```

```{r}

ine <- ine %>%
  mutate(Fecha = str_replace_all(
    Fecha,
    c("45582" = "17-10", "45583" = "18-10", "45613" = "17-10", 
      "45643" = "17-12")
  ))

ine <- ine %>%
  mutate(Fecha = as.Date(paste0("20", str_sub(Fecha, 1, 2), "-", str_sub(Fecha, 4, 5), "-01"))) # Formato: YYYY-MM-DD



# Ordenar el DataFrame por la columna 'Fecha'
ine <- ine %>%
  arrange(Fecha)

head(ine)
```

En esta parte se crea el dataframe con los datos los data frame "ine" y "hotel", que contienen la información del mercado hotelero chileno y del hotel en observación.

```{r}
ipc <- read_excel("ipc.xlsx")


head(ipc)
```

```{r}
ipc <- ipc %>%
  rename(Fecha = Periodo)%>%
  rename(ipc_ = `1.IPC`)

datos <- ine %>%
  left_join(hotel %>% select(Fecha, prom_hab, pasajero_en_casa), by = "Fecha")%>%
  left_join(ipc %>% select(Fecha, ipc_), by = "Fecha")

datos <- datos %>%
  mutate(
    temporada = case_when(
      format(Fecha, "%m") %in% c("12", "01", "02") ~ 1,  # Diciembre, enero, febrero (Temporada Alta)
      TRUE ~ 0  # El resto del año (Temporada Baja)
    )
  )
head(datos)
```

# Utilizando los data frame

El total de las habitaciones en uso durante los periodos sera considerada como el Y, ya que es el referente del mercado de la industria hotelera, se observa los picks estivales en verano, mostrando un comportamiento similar en cada mes para los 2 años observados.

```{r}
datos$Fecha <- as.Date(datos$Fecha)
ggplot(data = datos, aes(x = Fecha, y = total_ocupacion_ind)) +
  geom_line(color = "blue") +  # Línea azul
  geom_point(color = "red") +   # Puntos rojos en cada observación
  labs(title = "Total de habitaciones utilizadas",
       x = "Fecha",
       y = "Total Ocupación Hoteles") +
  scale_x_date(breaks = "6 months", labels = date_format("%Y-%m")) + 
  theme(axis.text.x = element_text(angle = 75, hjust = 1, size = 5)) +
  theme_minimal()
```

La correlación entre los valores dependientes, que son principalmente los pasajeros en cada del hotel en relación a la ocupación total del mercado es del 95.35% y con el valor promedio de la habitación es de un %90.92, por lo que se entiende una correlación positiva entre las variables.

```{r}
correlacion <- cor(datos[, -1])  # Excluyendo la columna Fecha
print(correlacion)
```

```{r}
summary(select(datos, -Fecha))
```

```{r}

estadistica <- lm( log(pasajero_en_casa) ~ log(total_ocupacion_ind) + factor(temporada) , data = datos)

summary(estadistica)

```
```{r}
# Crear un objeto de serie temporal con los datos de ocupación del hotel, desde la informacion historica, con una freciancia de 12mese e iniciancdo el 01-2017

ts_ocupacion <- ts(hotel$ocupacion, frequency = 12, start = c(2017, 1))

# Ajustar un modelo ARIMA, que es unmodelo para estucturas temporales, como es el caso.  
modelo_arima <- auto.arima(ts_ocupacion)

# Hacer predicciones para los próximos 24 meses 
predicciones <- forecast(modelo_arima, h = 24)

# Graficar las predicciones, considernado intervalos de confianza del 80% y 90%
autoplot(predicciones) +
  labs(title = "Proyección de Ocupación del Hotel", 
       x = "Fecha", 
       y = "Ocupación (%)") +
  theme_minimal()
```


```{r}
# Establecer el tamaño del conjunto de entrenamiento
n <- nrow(hotel)
train_size <- floor(0.8 * n)

# Crear conjuntos de entrenamiento y prueba
train_data <- hotel$ocupacion[1:train_size]
test_data <- hotel$ocupacion[(train_size + 1):n]

# Crear un objeto de serie temporal para el conjunto de entrenamiento
ts_train <- ts(train_data, frequency = 12, start = c(2017, 1))

# Ajustar el modelo ARIMA
modelo_arima <- auto.arima(ts_train)

# Hacer predicciones para el tamaño del conjunto de prueba
h <- length(test_data)  # Longitud del conjunto de prueba
predicciones <- forecast(modelo_arima, h = h)

# Calcular RMSE
rmse <- sqrt(mean((predicciones$mean - test_data)^2))
cat("RMSE:", rmse, "\n")

resultado <- data.frame(
  Fecha = hotel$Fecha[(train_size + 1):n],
  Real = test_data,
  Predicho = predicciones$mean
)


# Graficar
ggplot(resultado, aes(x = Fecha)) +
  geom_line(aes(y = Real, color = "Real"), size = 1) +
  geom_line(aes(y = Predicho, color = "Predicho"), size = 1, linetype = "dashed") +
  labs(title = "Comparación de Ocupación Real vs. Predicha",
       x = "Fecha",
       y = "Ocupación (%)") +
  scale_color_manual(values = c("Real" = "blue", "Predicho" = "red")) +
  theme_minimal()
```

